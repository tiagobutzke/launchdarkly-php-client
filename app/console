#!/usr/bin/env php
<?php
// if you don't want to setup permissions the proper way, just uncomment the following PHP line
// read http://symfony.com/doc/current/book/installation.html#configuration-and-setup for more information
//umask(0000);

set_time_limit(0);

require_once __DIR__.'/bootstrap.php.cache';
require_once __DIR__.'/AppKernel.php';

use Symfony\Bundle\FrameworkBundle\Console\Application;
use Symfony\Component\Console\Input\ArgvInput;
use Symfony\Component\Debug\Debug;
use Symfony\Component\Process\Process;

if (empty(AppKernel::getCountryCodeEnvironmentVariable())) {

    foreach (AppKernel::getAvailableCountryCodes() as $countryCode) {
        echo "Executing command with \"$countryCode\" country code...\n";
        $command = implode(' ',
            array_merge(
                [getPhp()],
                array_map('escapeshellarg', getPhpArguments()),
                array_map('escapeshellarg', $argv)
            )
        );

        $input = new ArgvInput();
        $env = $input->getParameterOption(array('--env', '-e'), getenv('SYMFONY_ENV') ?: 'dev');

        $environmentVariables = [
            AppKernel::ENVIRONMENT_COUNTRY_CODE => $countryCode,
            'SYMFONY_ENV' => $env,
        ];
        $process = new Process($command, null, $environmentVariables);
        $process->setTimeout(null);
        $process->setIdleTimeout(null);

        $process->mustRun(function ($type, $buffer) use ($countryCode) {
            if (Process::ERR === $type) {
                echo "ERR[$countryCode] > " . $buffer;
            } else {
                if (strrpos($buffer, PHP_EOL) === false) {
                    $buffer .= PHP_EOL;
                }
                echo "OUT[$countryCode] > "  .$buffer;
            }
        });
    }
} else {
    $input = new ArgvInput();
    $env = $input->getParameterOption(array('--env', '-e'), getenv('SYMFONY_ENV') ?: 'dev');
    $debug = getenv('SYMFONY_DEBUG') !== '0' && !$input->hasParameterOption(array('--no-debug', '')) && $env !== 'prod';
    if ($debug) {
        Debug::enable();
    }
    $kernel = new AppKernel($env, $debug);
    $application = new Application($kernel);
    $application->run($input);
}
/**
 * Returns path to current PHP executable
 *
 * @return string
 */
function getPhp()
{
    $phpFinder = new \Symfony\Component\Process\PhpExecutableFinder();
    if (!$phpPath = $phpFinder->find(false)) {
        throw new \RuntimeException('The php executable could not be found, add it to your PATH environment variable and try again');
    }
    return $phpPath;
}
/**
 * Returns list of arguments with which PHP script has been executed
 *
 * @return string[]
 */
function getPhpArguments()
{
    $phpFinder = new \Symfony\Component\Process\PhpExecutableFinder();
    $arguments = $phpFinder->findArguments();
    if (false !== $ini = php_ini_loaded_file()) {
        $arguments[] = '--php-ini='.$ini;
    }
    return $arguments;
}
